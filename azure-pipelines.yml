# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: $(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    exclude:
    - master

variables:
  shouldDeploy: false

pool:
  name: Hosted Windows 2019 with VS2019
  demands:
  - msbuild
  - visualstudio

jobs:
- job: General_Build
  steps:
  # ...
  # Use NuGet 5.x
  - task: NuGetToolInstaller@0
    displayName: 'Use NuGet 5.x'
    inputs:
      versionSpec: 5.x
  # ...
  # Restore NuGet packages.
  - task: NuGetCommand@2
    displayName: 'NuGet restore'
    inputs:
      feedsToUse: config
  # ...
  # Version with GitVersion
  - task: gitversion/setup@0
    displayName: Install GitVersion
    inputs:
      versionSpec: '5.x'
  - task: gitversion/execute@0
    displayName: Execute GitVersion
  # ...
  # Prepare analysis on SonarCloud
  - task: SonarSource.sonarcloud.14d9cde6-c1da-4d55-aa01-2965cd301255.SonarCloudPrepare@1
    displayName: 'Prepare analysis on SonarCloud'
    inputs:
      SonarCloud: AsyncHubCloud
      organization: 'async-hub'
      projectKey: 'Async-Hub_Orleans.Security'
      projectName: AsyncHub
  # ...
  # Build Solution
  - task: VSBuild@1
    displayName: 'Build solution Orleans.Security.Build.sln'
    inputs:
      solution: Orleans.Security.Build.sln
      platform: 'any cpu'
      configuration: release
      clean: true
  # ...
  # Run Code Analysis
  - task: SonarSource.sonarcloud.ce096e50-6155-4de8-8800-4221aaeed4a1.SonarCloudAnalyze@1
    displayName: 'Run Code Analysis'
  # ...
  # Run Tests
  - task: DotNetCoreCLI@2
    displayName: 'Run Tests'
    inputs:
      command: test
      projects: |
        test/Orleans.Security.IntegrationTests/Orleans.Security.IntegrationTests.csproj
        test/Orleans.Security.IntegrationTests.Functional/Orleans.Security.IntegrationTests.FSharp.fsproj
        test/Orleans.Security.IntegrationTests.TokenVerification/Orleans.Security.IntegrationTests.TokenVerification.csproj
        publishTestResults: true
  # ...
  # Pass $(GitVersion.SemVer) to the next job
  - powershell: echo "##vso[task.setvariable variable=GitVersionSemVer;isOutput=true]$env:GITVERSION_SEMVER"
    displayName: 'Pass $(GitVersion.SemVer) to the next job'
    name: gitVersionNumber
  # ...
  # Print SemVer Number
  - script: echo $(GitVersion.SemVer)
    displayName: 'Print SemVer Number'
  # ...
#*******
#For develop branch deploy to the CI feed (https://pkgs.dev.azure.com/asynchub/Orleans.Security/_packaging/Orleans.Security/nuget/v3/index.json).
#*******
- job: Deploy_Packages_CI_Feed
  dependsOn: General_Build
  variables:
    - group: Default
    - name: GitVersion.SemVer
      value: $[ dependencies.General_Build.outputs['gitVersionNumber.GitVersionSemVer'] ]
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  steps:
  # ...
  # Print SemVer Number
  - script: echo $(GitVersion.SemVer)
    displayName: 'Print SemVer Number'
  # ...
  # NuGet pack Orleans.Security.Build.sln
  - task: DotNetCoreCLI@2
    displayName: 'NuGet pack Orleans.Security.Build.sln'
    inputs:
      command: pack
      versioningScheme: byEnvVar
      versionEnvVar: GitVersion.SemVer
      packagesToPack: Orleans.Security.Build.sln
  # ...
  # Push NuGet packs to Azure Artifacts feed
  - task: NuGetCommand@2
    displayName: 'NuGet push to Azure Artifacts'
    inputs:
      command: push
      publishVstsFeed: '5a6d822d-5d9b-4d9a-8ce4-23803c42a92f/b388ac66-fe7a-4cd1-a30c-f06f7df3fc87'
      allowPackageConflicts: true
    continueOnError: true
#*******
#For master branch deploy to the RTW feed (https://www.nuget.org/).
#*******
- job: Deploy_Packages_RTW_Feed
  dependsOn: General_Build
  variables:
  - group: Default
  - name: GitVersion.SemVer
    value: $[ dependencies.General_Build.outputs['gitVersionNumber.GitVersionSemVer'] ] 
  #condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'),contains(variables['Build.SourceBranch'], 'refs/heads/release')))
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['variables.shouldDeploy'], true))
  steps:
  # ...
  # Print SemVer Number
  - script: echo $(GitVersion.SemVer)
    displayName: 'Print SemVer Number'
  # ...
  # NuGet pack Orleans.Security.Build.sln
  - task: DotNetCoreCLI@2
    displayName: 'NuGet pack Orleans.Security.Build.sln'
    inputs:
      command: pack
      versioningScheme: byEnvVar
      versionEnvVar: GitVersion.SemVer
      packagesToPack: Orleans.Security.Build.sln
  # ...
  # Push NuGet packs to www.nuget.org
  - task: NuGetCommand@2
    displayName: 'NuGet push'
    inputs:
      command: push
      nuGetFeedType: external
      publishFeedCredentials: 'AsyncHub_NuGet'
      versionEnvVar: <VersionVariableName>
  # ...